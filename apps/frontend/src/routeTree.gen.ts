/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AuthRouteImport } from './routes/_auth/route'
import { Route as AuthMenuRouteImport } from './routes/_auth/_menu/route'
import { Route as AuthMenuIndexImport } from './routes/_auth/_menu/index'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRouteRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthMenuRouteRoute = AuthMenuRouteImport.update({
  id: '/_menu',
  getParentRoute: () => AuthRouteRoute,
} as any)

const AuthMenuIndexRoute = AuthMenuIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthMenuRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_auth/_menu': {
      id: '/_auth/_menu'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthMenuRouteImport
      parentRoute: typeof AuthRouteImport
    }
    '/_auth/_menu/': {
      id: '/_auth/_menu/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthMenuIndexImport
      parentRoute: typeof AuthMenuRouteImport
    }
  }
}

// Create and export the route tree

interface AuthMenuRouteRouteChildren {
  AuthMenuIndexRoute: typeof AuthMenuIndexRoute
}

const AuthMenuRouteRouteChildren: AuthMenuRouteRouteChildren = {
  AuthMenuIndexRoute: AuthMenuIndexRoute,
}

const AuthMenuRouteRouteWithChildren = AuthMenuRouteRoute._addFileChildren(
  AuthMenuRouteRouteChildren,
)

interface AuthRouteRouteChildren {
  AuthMenuRouteRoute: typeof AuthMenuRouteRouteWithChildren
}

const AuthRouteRouteChildren: AuthRouteRouteChildren = {
  AuthMenuRouteRoute: AuthMenuRouteRouteWithChildren,
}

const AuthRouteRouteWithChildren = AuthRouteRoute._addFileChildren(
  AuthRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthMenuRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/': typeof AuthMenuIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/': typeof AuthMenuIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_auth/_menu': typeof AuthMenuRouteRouteWithChildren
  '/_auth/_menu/': typeof AuthMenuIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/login' | '/register' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/register' | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/login'
    | '/register'
    | '/_auth/_menu'
    | '/_auth/_menu/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRouteRoute: typeof AuthRouteRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRouteRoute: AuthRouteRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/login",
        "/register"
      ]
    },
    "/_auth": {
      "filePath": "_auth/route.tsx",
      "children": [
        "/_auth/_menu"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_auth/_menu": {
      "filePath": "_auth/_menu/route.tsx",
      "parent": "/_auth",
      "children": [
        "/_auth/_menu/"
      ]
    },
    "/_auth/_menu/": {
      "filePath": "_auth/_menu/index.tsx",
      "parent": "/_auth/_menu"
    }
  }
}
ROUTE_MANIFEST_END */
